[comment encoding = UTF-8 /]
[module generateDataClass('http://genandroid/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import fr::vojtisek::genandroid::acceleo::common::commonTemplate/]

[template public generateDataClassFile(aDataClass : DataClass)]

[file ('/'+aDataClass.eContainer(AndroidProject).javaSourceFolder+aDataClass.packagePrefixFolder()+'server/datamodel/'.concat(aDataClass.name).concat('.java'), false, 'UTF-8')]
/* [aDataClass.eContainer().eContainer().oclAsType(AndroidProject).fileHeader/] */
package [aDataClass.packagePrefix()/]server.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

[comment Add import for Json serialisation purpose : /]
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

[for (aDataAssociation : DataAssociation | aDataClass.eContainer(AndroidProject).dataModel.dataAssociations)]
	[if(aDataAssociation.references->first().upperBound <> 1 and aDataAssociation.references->last().upperBound <> 1)] 
import [aDataClass.packagePrefix()/]server.datamodel.associations.[aDataAssociation.name/];
	[/if] 
[/for]
// [protected ('additional import for '.concat(aDataClass.name))]
// [/protected]

/** 
  * [aDataClass.documentation/] 
  */ 
@DatabaseTable(tableName = "[aDataClass.name.toLowerFirst()/]")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, 
                  property  = "_id",
				  scope = [aDataClass.name.toUpperFirst()/].class)
public class [aDataClass.name.toUpperFirst()/] implements DbClass {

	public static Log log = LogFactory.getLog([aDataClass.name.toUpperFirst()/].class);

	public static final String XML_[aDataClass.name.toUpper()/] = "[aDataClass.name.toUpper()/]";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_CLIENT_ID = "client_id";
	[for (att : DataAttribute | aDataClass.dataAttributes)]
	public static final String XML_ATT_[att.name.toUpper()/] = "[att.name.toLowerFirst()/]";
	[/for]
	[for (ref : DataReference | aDataClass.dataReferences)]
	public static final String XML_REF_[ref.name.toUpper()/] = "[ref.name.toLowerFirst()/]";
	[/for]
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	@JsonIgnore
	protected [aDataClass.eContainer(DataModel).name.toUpperFirst()/]Helper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	[for (ref : DataReference | aDataClass.dataReferences)]
		[if (ref.upperBound = 1)]
			[if (not ref.derived)]	
	@JsonIgnore
	public boolean [ref.name.toLowerFirst()/]_mayNeedDBRefresh = true;
			[/if]
		[/if]
	[/for]
	
	[for (att : DataAttribute | aDataClass.dataAttributes)]

		[if(not att.documentation.oclIsUndefined())]
	/** [att.documentation/] */ 
		[/if]
		[if (att.upperBound = 1)]
			[if (att.storage = storageKind::SQLite)] 
				[if (att.type.databaseType.oclIsUndefined())]
	@DatabaseField
				[else]
	@DatabaseField(dataType = [att.type.databaseType/])
				[/if]
			[else]
				[if (att.storage.oclIsUndefined())]
	/** Contournement Guillaume car att.storage est toujours vide chez moi **/
	@DatabaseField
				[/if]
			[/if]
	protected [att.oneEAttributeParam()/];
		[else]
	// NOT Implemented<[att.type.instanceClassName/]> [att.name.toLowerFirst()/];
	// [protected (att.name.toLowerFirst().concat('- Permet de ne pas perdre Implémentation Manuelle de : ')) ]
	// [/protected]
		[/if]
	[/for]
	
	[for (ref : DataReference | aDataClass.dataReferences)]

		[if(not ref.documentation.oclIsUndefined())]
	/** [ref.documentation/] */ 
		[/if]
		[if (ref.opposite.oclIsUndefined())] [comment no opposite /]
			[if (ref.upperBound = 1)]
				[if (ref.storage = storageKind::SQLite)]
	@DatabaseField(foreign = true)
	// @JsonManagedReference(value="[ref.opposite.name.toLowerCase()/]")
				[else]
					[if (ref.storage.oclIsUndefined())]
	/** Contournement Guillaume car ref.storage est toujours vide chez moi **/
	@DatabaseField(foreign = true)
					[/if]
				[/if]
	protected [ref.oneEReferenceParam()/];
			[else] [comment management of references with multiplicity <> 1 but no opposite /]
				[if (ref.storage = storageKind::SQLite)]
	@ForeignCollectionField(eager = false)
	@JsonIgnore
	protected ForeignCollection<[ref.type.name/]> [ref.name.toLowerFirst()/];
				[else]
	// NOT Implemented non SQLite collection reference (no opposite) [ref.name.toLowerFirst()/];
	// [protected (ref.name.toLowerFirst().concat('- Permet de ne pas perdre Implémentation Manuelle de : ')) ]
	// [/protected]
				[/if]
			[/if]
		[else]
			[comment management of references with opposite/]
			[if (ref.upperBound = 1)]
				[if (ref.storage = storageKind::SQLite)]
	@DatabaseField(foreign = true) //, columnName = USER_ID_FIELD_NAME)
	// @JsonManagedReference(value="[ref.opposite.name.toLowerCase()/]")
				[/if]
	protected [ref.oneEReferenceParam()/];
			[else] [comment management of references with opposite and multiplicity <> 1 /]
				[if (ref.opposite.references->select(otherRef : DataReference | otherRef <> ref)->first().upperBound <> 1)]	
					[if (ref.storage = storageKind::SQLite)]
	// work in progress, find association 
	// Association many to many [ref.opposite.name.toUpperFirst()/]
	[let otherRef : DataReference = ref.opposite.references->select(otherRef : DataReference | otherRef <> ref)->first()]
	@ForeignCollectionField(eager = false, foreignFieldName = "[otherRef.type.name.toLowerFirst()/]")
	@JsonIgnore	
	protected ForeignCollection<[ref.opposite.name.toUpperFirst()/]> [ref.opposite.name.toLowerFirst()/];

	/** [ref.documentation/] 
	  * Attention, returned list is readonly
      */
	public List<[ref.type.name.toUpperFirst()/]> get[ref.name.toUpperFirst()/](){
		List<[ref.type.name.toUpperFirst()/]> result = new ArrayList<[ref.type.name.toUpperFirst()/]>();
		
		for ([ref.opposite.name.toUpperFirst()/] a[ref.opposite.name.toUpperFirst()/] : [ref.opposite.name.toLowerFirst()/]) {
			if(_contextDB != null) a[ref.opposite.name.toUpperFirst()/].setContextDB(_contextDB);
			result.add(a[ref.opposite.name.toUpperFirst()/].get[ref.type.name.toUpperFirst()/]());
		}
		return result;
	}
	public void add[ref.type.name.toUpperFirst()/]([ref.type.name.toUpperFirst()/] [ref.type.name.toLowerFirst()/]){
		try {
		[if (ref = ref.opposite.references->first())]
			_contextDB.[ref.opposite.name.toLowerFirst()/]Dao.create(new [ref.opposite.name.toUpperFirst()/]( this, [ref.type.name.toLowerFirst()/]));
		[else]
			_contextDB.[ref.opposite.name.toLowerFirst()/]Dao.create(new [ref.opposite.name.toUpperFirst()/]( [ref.type.name.toLowerFirst()/], this));		
		[/if]
		} catch (SQLException e) {
			log.error("Pb while adding association [ref.opposite.name.toLowerFirst()/]",e);
		}
	}
	[/let]
	// end work in progress 	

				
					[else]
	// NOT Implemented non SQLite many2many collection reference [ref.name.toLowerFirst()/];
	// [protected (ref.name.toLowerFirst().concat(' - Permet de ne pas perdre Implémentation Manuelle de non SQLite many2many : ')) ]
	// [/protected]
					[/if]
				[else] [comment the opposite has multiplicity = 1/]
					[if (ref.storage = storageKind::SQLite)]
	@ForeignCollectionField(eager = false, foreignFieldName = "[ref.opposite.references->select(otherRef : DataReference | otherRef <> ref)->first().name/]")
	@JsonIgnore
	protected ForeignCollection<[ref.type.name/]> [ref.name.toLowerFirst()/];
					[else]
	// NOT Implemented non SQLite collection reference [ref.name.toLowerFirst()/];
	// [protected (ref.name.toLowerFirst().concat(' - Permet de ne pas perdre Implémentation Manuelle de non SQLite collection reference : ')) ]
	// [/protected]
					[/if]
				[/if]
			[/if]
		[/if]
	[/for]

	@DatabaseField
	protected int client_id;

	// [protected (aDataClass.name.concat(' additional user properties'))]
	// [/protected]
	
	public [aDataClass.name.toUpperFirst()/]() {} // needed by ormlite
	public [aDataClass.name.toUpperFirst()/]([aDataClass.allNonDerivedEAttributesParam()/]) {
		super();
	[for (att : DataAttribute | aDataClass.dataAttributes)]
		[if (att.upperBound = 1 and not att.derived)]
		this.[att.name.toLowerFirst()/] = [att.name.toLowerFirst()/];
		[/if]
	[/for]
	} 

	/**
	 * raw_id from client converted as part of a primary key in combination of user UUID
	 */
	public int get_id() {
		return client_id;
	}
	@JsonProperty
	public void set_id(int id) {
		this.client_id = id;
	}

	public int getId() {
		return _id;
	}
	@JsonProperty
	public void setId(int id) {
		this._id = id;
	}

	public [aDataClass.eContainer(DataModel).name.toUpperFirst()/]Helper getContextDB(){
		return _contextDB;
	}
	@JsonIgnore
	public void setContextDB([aDataClass.eContainer(DataModel).name.toUpperFirst()/]Helper contextDB){
		this._contextDB = contextDB;
	}

	[for (att : DataAttribute | aDataClass.dataAttributes)]
		[if (att.upperBound = 1)]
	public [att.type.instanceClassName/] get[att.name.toUpperFirst()/]() {
			[if (att.derived)]
		// [protected ('placeholder for derived attribute '.concat(att.name))]
		// [/protected]			
			[/if]
		return this.[att.name.toLowerFirst()/];
	}
	@JsonProperty
	public void set[att.name.toUpperFirst()/]([att.type.instanceClassName/] [att.name.toLowerFirst()/]) {
		this.[att.name.toLowerFirst()/] = [att.name.toLowerFirst()/];
	}
		[/if]
	[/for]

	[for (ref : DataReference | aDataClass.dataReferences)]
		[if (ref.upperBound = 1)]
			[if(not ref.documentation.oclIsUndefined())]
	/** [ref.documentation/] */ 
			[/if]
	public [ref.type.name.toUpperFirst()/] get[ref.name.toUpperFirst()/]() {
			[if (ref.derived)]
		// [protected ('placeholder for derived referenc '.concat(ref.name))]
		// [/protected]
			[else]
		try {
			if([ref.name.toLowerFirst()/]_mayNeedDBRefresh && _contextDB != null){
				_contextDB.[ref.type.name.toLowerFirst()/]Dao.refresh(this.[ref.name.toLowerFirst()/]);
				[ref.name.toLowerFirst()/]_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
			[/if]
		if(_contextDB==null && this.[ref.name.toLowerFirst()/] == null){
			log.warn("[aDataClass.name.toUpperFirst()/] may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.[ref.name.toLowerFirst()/];
	}
	@JsonProperty
	public void set[ref.name.toUpperFirst()/]([ref.type.name.toUpperFirst()/] [ref.name.toLowerFirst()/]) {
		this.[ref.name.toLowerFirst()/] = [ref.name.toLowerFirst()/];
	}			
		[else]
			[if (ref.opposite.oclIsUndefined() or ref.opposite.references->select(otherRef : DataReference | otherRef <> ref)->first().upperBound = 1)]	
				[if(not ref.documentation.oclIsUndefined())]
	/** [ref.documentation/] */
				[/if] 
	public List	<[ref.type.name.toUpperFirst()/]> get[ref.name.toUpperFirst()/]() {
				[if (ref.derived)]
		// [protected ('placeholder for derived reference '.concat(ref.name))]
		// [/protected]
				[/if]
		if(null==this.[ref.name.toLowerFirst()/]){return null;}
		return new ArrayList<[ref.type.name.toUpperFirst()/]>([ref.name.toLowerFirst()/]);
	}
	
	[comment @JsonProperty
	public void set"ref.name.toUpperFirst()/" (Collection<"ref.type.name.toUpperFirst()/"> collection){ this."ref.name.toLowerFirst()/"=(ForeignCollection) collection;}/]

			
			[/if]
		[/if]
	[/for]



	public String toXML(String indent, [aDataClass.eContainer(DataModel).name.toUpperFirst()/]Helper contextDB){
		StringBuilder sb = new StringBuilder();
		sb.append(indent+"<");
    	sb.append(XML_[aDataClass.name.toUpper()/]);
		sb.append(" "+XML_ATT_ID+"=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
		sb.append(XML_ATT_CLIENT_ID);
		sb.append("=\"");
		sb.append(this.client_id);
		sb.append("\" ");
	[for (att : DataAttribute | aDataClass.dataAttributes)]
		[if (att.upperBound = 1 and att.simpleXmlType and not att.derived)]
		sb.append(" ");
    	sb.append(XML_ATT_[att.name.toUpper()/]);
    	sb.append("=\"");
			[if (att.type.instanceClassName = 'java.lang.String')]
		sb.append(StringEscapeUtils.escapeXml(this.[att.name.toLowerFirst()/]));
			[else]
		sb.append(this.[att.name.toLowerFirst()/]);
			[/if]
    	sb.append("\" ");
		[/if]
	[/for]
    	sb.append(">");

	[for (att : DataAttribute | aDataClass.dataAttributes)]
		[if (att.upperBound = 1 and not att.simpleXmlType  and not att.derived)]
		sb.append("\n"+indent+"\t<"+XML_ATT_[att.name.toUpper()/]+">");
			[if (att.type.instanceClassName = 'java.lang.String')]
		sb.append(StringEscapeUtils.escapeXml(this.[att.name.toLowerFirst()/]));
			[else]
		sb.append(this.[att.name.toLowerFirst()/]);
			[/if]
    	sb.append("</"+XML_ATT_[att.name.toUpper()/]+">");
		[/if]
	[/for]

	[for (ref : DataReference | aDataClass.dataReferences)]
		[if (ref.upperBound = 1 )]
			[if(ref.opposite.oclIsUndefined() or not ref.opposite.references->select(otherRef : DataReference | otherRef <> ref)->first().containment)]
		if(this.[ref.name.toLowerFirst()/]!= null){
			sb.append("\n"+indent+"\t<"+XML_REF_[ref.name.toUpper()/]+">");
			sb.append(this.[ref.name.toLowerFirst()/].getId());
	    	sb.append("</"+XML_REF_[ref.name.toUpper()/]+">");
		}
			[/if]
		[else]
			[if(not ref.opposite.oclIsUndefined() and ref.opposite.references->select(otherRef : DataReference | otherRef <> ref)->first().upperBound=1)]							
				[if(not ref.containment)]
		if(this.[ref.name.toLowerFirst()/] != null){
			for([ref.type.name.toUpperFirst()/] ref : this.[ref.name.toLowerFirst()/]){
					
	    		sb.append("\n"+indent+"\t<"+XML_REF_[ref.name.toUpper()/]+" id=\"");
	    		sb.append(ref._id);
	        	sb.append("\"/>");
	    	}		
		}
				[else]
		sb.append("\n"+indent+"\t<"+XML_REF_[ref.name.toUpper()/]+">");
		if(this.[ref.name.toLowerFirst()/] != null){
			for([ref.type.name.toUpperFirst()/] ref : this.[ref.name.toLowerFirst()/]){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_[ref.name.toUpper()/]+">");		
				[/if]
			[else]		
		
				[if(not ref.containment)]
		for([ref.type.name.toUpperFirst()/] ref : this.get[ref.name.toUpperFirst()/]()){
    		sb.append("\n"+indent+"\t<"+XML_REF_[ref.name.toUpper()/]+" id=\"");
    		sb.append(ref._id);
        	sb.append("\"/>");
			
    	}
				[else]
		try{
			sb.append("\n"+indent+"\t<"+XML_REF_[ref.name.toUpper()/]+">");
			for([ref.type.name.toUpperFirst()/] ref : this.lookup[ref.name.toUpperFirst()/](contextDB)){
				sb.append("\n"+ref.toXML(indent+"\t", contextDB));				
	    	}
			sb.append("</"+XML_REF_[ref.name.toUpper()/]+">");
        }
		catch(SQLException e){};
				[/if]
			
			[/if]
		[/if]
	[/for]
		// TODO deal with other case

		sb.append("</"+XML_[aDataClass.name.toUpper()/]+">");
		return sb.toString();
	}
}
[/file]
[/template]




