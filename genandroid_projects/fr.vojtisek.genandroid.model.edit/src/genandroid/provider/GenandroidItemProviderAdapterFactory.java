/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package genandroid.provider;

import genandroid.util.GenandroidAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GenandroidItemProviderAdapterFactory extends GenandroidAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GenandroidItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.AndroidProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndroidProjectItemProvider androidProjectItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.AndroidProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndroidProjectAdapter() {
		if (androidProjectItemProvider == null) {
			androidProjectItemProvider = new AndroidProjectItemProvider(this);
		}

		return androidProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.DataModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataModelItemProvider dataModelItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.DataModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataModelAdapter() {
		if (dataModelItemProvider == null) {
			dataModelItemProvider = new DataModelItemProvider(this);
		}

		return dataModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.EditableElementViewActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditableElementViewActivityItemProvider editableElementViewActivityItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.EditableElementViewActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditableElementViewActivityAdapter() {
		if (editableElementViewActivityItemProvider == null) {
			editableElementViewActivityItemProvider = new EditableElementViewActivityItemProvider(this);
		}

		return editableElementViewActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.ClassListViewActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassListViewActivityItemProvider classListViewActivityItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.ClassListViewActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassListViewActivityAdapter() {
		if (classListViewActivityItemProvider == null) {
			classListViewActivityItemProvider = new ClassListViewActivityItemProvider(this);
		}

		return classListViewActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.DataClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataClassItemProvider dataClassItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.DataClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataClassAdapter() {
		if (dataClassItemProvider == null) {
			dataClassItemProvider = new DataClassItemProvider(this);
		}

		return dataClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.ReferenceListViewActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceListViewActivityItemProvider referenceListViewActivityItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.ReferenceListViewActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceListViewActivityAdapter() {
		if (referenceListViewActivityItemProvider == null) {
			referenceListViewActivityItemProvider = new ReferenceListViewActivityItemProvider(this);
		}

		return referenceListViewActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.ClassDetail} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassDetailItemProvider classDetailItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.ClassDetail}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassDetailAdapter() {
		if (classDetailItemProvider == null) {
			classDetailItemProvider = new ClassDetailItemProvider(this);
		}

		return classDetailItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.DataAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAttributeItemProvider dataAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.DataAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAttributeAdapter() {
		if (dataAttributeItemProvider == null) {
			dataAttributeItemProvider = new DataAttributeItemProvider(this);
		}

		return dataAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.DataReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataReferenceItemProvider dataReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.DataReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataReferenceAdapter() {
		if (dataReferenceItemProvider == null) {
			dataReferenceItemProvider = new DataReferenceItemProvider(this);
		}

		return dataReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.ListViewActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListViewActivityItemProvider listViewActivityItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.ListViewActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListViewActivityAdapter() {
		if (listViewActivityItemProvider == null) {
			listViewActivityItemProvider = new ListViewActivityItemProvider(this);
		}

		return listViewActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.AttributeListViewActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeListViewActivityItemProvider attributeListViewActivityItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.AttributeListViewActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeListViewActivityAdapter() {
		if (attributeListViewActivityItemProvider == null) {
			attributeListViewActivityItemProvider = new AttributeListViewActivityItemProvider(this);
		}

		return attributeListViewActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link genandroid.ElementViewActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementViewActivityItemProvider elementViewActivityItemProvider;

	/**
	 * This creates an adapter for a {@link genandroid.ElementViewActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementViewActivityAdapter() {
		if (elementViewActivityItemProvider == null) {
			elementViewActivityItemProvider = new ElementViewActivityItemProvider(this);
		}

		return elementViewActivityItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (androidProjectItemProvider != null) androidProjectItemProvider.dispose();
		if (dataModelItemProvider != null) dataModelItemProvider.dispose();
		if (editableElementViewActivityItemProvider != null) editableElementViewActivityItemProvider.dispose();
		if (classListViewActivityItemProvider != null) classListViewActivityItemProvider.dispose();
		if (dataClassItemProvider != null) dataClassItemProvider.dispose();
		if (referenceListViewActivityItemProvider != null) referenceListViewActivityItemProvider.dispose();
		if (classDetailItemProvider != null) classDetailItemProvider.dispose();
		if (dataAttributeItemProvider != null) dataAttributeItemProvider.dispose();
		if (dataReferenceItemProvider != null) dataReferenceItemProvider.dispose();
		if (listViewActivityItemProvider != null) listViewActivityItemProvider.dispose();
		if (attributeListViewActivityItemProvider != null) attributeListViewActivityItemProvider.dispose();
		if (elementViewActivityItemProvider != null) elementViewActivityItemProvider.dispose();
	}

}
