[comment encoding = UTF-8 /]
[module generateMobilePrivacyRestClient('http://genandroid/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import fr::vojtisek::genandroid::acceleo::common::commonTemplate/]

[template public generateExportClassFile(aAndroidProject : AndroidProject)]

[file ('/'+aAndroidProject.javaSourceFolder+aAndroidProject.packagePrefixFolder()+'/rest/'.concat('MobilePrivacyRestClient.java'), false, 'UTF-8')]
/* [aAndroidProject.fileHeader/] */
package [aAndroidProject.dataModel.packagePrefix()/].rest;

import [aAndroidProject.dataModel.packagePrefix()/].datamodel.OrmLiteDBHelper;

import android.content.Context;
import android.util.Log;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.j256.ormlite.android.apptools.OpenHelperManager;

import java.sql.SQLException;
import java.util.Date;
import java.util.List;

[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
		[if(aDataClass.oclIsKindOf(DataClass))]
			[if (aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
import [aDataClass.packagePrefix()/].datamodel.[aDataClass.name.toUpperFirst()/];
			[/if]
		[/if]
[/for]

// [protected ('additional import for '.concat('MobilePrivacyRestClient'))]
// [/protected]

/** 
  * [aAndroidProject.documentation/] 
  */ 

public class MobilePrivacyRestClient {

	private static final String TAG = MobilePrivacyRestClient.class.getSimpleName();
	private volatile OrmLiteDBHelper dbHelper;
    
	static MobilePrivacyRestClient mobilePrivacyRestClient = null;
// [protected ('SetUp serverUrl here :')]
	private String serverUrl =null;
// [/protected]
	
	/**
     * Class constructor
     */
    MobilePrivacyRestClient(){}
	
	/**
     * singelton getter
     * @return singelton mobilePrivacyRestClient
     */
    public static MobilePrivacyRestClient getMobilePrivacyRestClient(){
        if(null==mobilePrivacyRestClient){mobilePrivacyRestClient = new MobilePrivacyRestClient();return mobilePrivacyRestClient;}
        return mobilePrivacyRestClient;
	}

	/**
     * Export the local DB to the server
     * @return
     */
    public void exportDB(Context context) throws SQLException {

        MobilePrivacyProfilerDB_metadata metadata = getDBHelper(context).getMobilePrivacyProfilerDBHelper().getDeviceDBMetadata();
        metadata.setLastTransmissionDate(new Date());
        getDBHelper(context).getMobilePrivacyProfilerDB_metadataDao().update(metadata);

		[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
				[if(aDataClass.oclIsKindOf(DataClass))]
					[if (aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
					[if (aDataClass.name.toUpperFirst()='MobilePrivacyProfilerDB_metadata')]
					
		exportMetadata(context);

					[else]
		export[aDataClass.name.toUpperFirst()/](context);
					[/if]
					[/if]
				[/if]
		[/for]

	}//endexportDB

	[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
		[if(aDataClass.oclIsKindOf(DataClass))]
			[if (aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]	

			[if (aDataClass.name.toUpperFirst()='MobilePrivacyProfilerDB_metadata')]		
	/**
     * query all entries from a table to serialize it into a list and sending it to the server part
     * @param context
     * @throws SQLException
     */
    private void exportMetadata(Context context) {
        //query all entries
        List<MobilePrivacyProfilerDB_metadata> toExport= getDBHelper(context).getMobilePrivacyProfilerDB_metadataDao().queryForAll();

        if(null!=toExport && !toExport.isEmpty()) {
            //translation of the collection into Json
            String postData = serialize(toExport);
            //execute the export to the server
            executePostRequest(this.serverUrl, "/Metadata", postData);
        }
    }
			[else]
	/**
     * query all entries from a table to serialize it into a list and sending it to the server part
     * @param context
     * @throws SQLException
     */
    private void export[aDataClass.name.toUpperFirst()/](Context context) {
        //query all entries
        List<[aDataClass.name.toUpperFirst()/]> toExport= getDBHelper(context).get[aDataClass.name.toUpperFirst()/]Dao().queryForAll();
        if(null != toExport && !toExport.isEmpty()) {
            //translation of the collection into Json
            String postData = serialize(toExport);
            Log.d(TAG,postData);
            //execute the export to the server
            executePostRequest(this.serverUrl,"/[aDataClass.name.toUpperFirst()/]",postData);
        }
    }
			[/if]
			[/if]
		[/if]
	[/for]

	/**
     * Execute the web request prepared in the export method
     * @param serverUrl
     * @param apiPath
     * @param postData
     */
    private void executePostRequest(String serverUrl,String apiPath,String postData){
        try {
            HttpPostAsyncTask task = new HttpPostAsyncTask(postData);
            task.execute( serverUrl+ apiPath);
        } catch (Exception e) { e.printStackTrace(); }
    }

	/**
     * @param object
     * @return a json String from your object
     */
    private String serialize (Object object) {
        //translation of object into Json
        ObjectMapper mapper = new ObjectMapper();
        String jsonObjectOutput = "";
        try {
            jsonObjectOutput = mapper.writeValueAsString(object);
            Log.d(TAG, "serialized : "+object.getClass().getSimpleName());

        } catch (JsonProcessingException e) {e.printStackTrace();}
        return jsonObjectOutput;
    }

    /**
     *
     * @param context
     * @return the dbHelper to query the DB
     */
    public OrmLiteDBHelper getDBHelper(Context context){
        if(dbHelper == null){
            dbHelper = OpenHelperManager.getHelper(context, OrmLiteDBHelper.class);
        }
        return dbHelper;
    }

}//end class
[/file]
[/template]




