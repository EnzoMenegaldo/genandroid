[comment encoding = UTF-8 /]
[module generateClassListViewAdapter('http://genandroid/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import fr::vojtisek::genandroid::acceleo::common::commonTemplate/]

[template public generateClassListViewAdapter(aClassListViewActivity : ClassListViewActivity)]

[file ('/src/'+aClassListViewActivity.packagePrefixFolder()+'/activities/'+aClassListViewActivity.name+'_Adapter.java', false, 'UTF-8')]
/* [aClassListViewActivity.eContainer(AndroidProject).fileHeader/] */
package [aClassListViewActivity.packagePrefix()/].activities;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import [aClassListViewActivity.packagePrefix()/].R;
import [aClassListViewActivity.packagePrefix()/].datamodel.[aClassListViewActivity.eContainer(AndroidProject).dataModel.name/]Helper;
import [aClassListViewActivity.packagePrefix()/].datamodel.[aClassListViewActivity.listedElement.name/];


import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.j256.ormlite.dao.RuntimeExceptionDao;

//[protected ('protected additional '+aClassListViewActivity.name+'_Adapter imports')]
// additional imports
//[/protected]

public class [aClassListViewActivity.name/]_Adapter extends BaseAdapter implements Filterable{
	
	private Context context;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	protected [aClassListViewActivity.eContainer(AndroidProject).dataModel.name/]Helper _contextDB = null;

	private static final String LOG_TAG = [aClassListViewActivity.name/]_Adapter.class.getCanonicalName();

    private List<[aClassListViewActivity.listedElement.name/]> [aClassListViewActivity.listedElement.name.toLowerFirst()/]List;
    private List<[aClassListViewActivity.listedElement.name/]> filtered[aClassListViewActivity.listedElement.name.toUpperFirst()/]List;
	private final Object mLock = new Object();
	private SimpleFilter mFilter;

	public [aClassListViewActivity.name/]_Adapter(Context context, [aClassListViewActivity.eContainer(AndroidProject).dataModel.name/]Helper contextDB) {
		super();
		this.context = context;
		this._contextDB = contextDB;
		// TODO find a way to query in a lazy way
		try{
			this.[aClassListViewActivity.listedElement.name.toLowerFirst()/]List = _contextDB.[aClassListViewActivity.listedElement.name.toLowerFirst()/]Dao.queryForAll();
			this.filtered[aClassListViewActivity.listedElement.name.toUpperFirst()/]List = this.[aClassListViewActivity.listedElement.name.toLowerFirst()/]List;
		} catch (java.sql.SQLException e) {
			Log.e(LOG_TAG, e.getMessage(), e);
		}
	}

	@Override
	public int getCount() {
		return filtered[aClassListViewActivity.listedElement.name.toUpperFirst()/]List.size();
	}

	@Override
	public Object getItem(int position) {
		return filtered[aClassListViewActivity.listedElement.name.toUpperFirst()/]List.get(position);

	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup viewGroup) {
		[aClassListViewActivity.listedElement.name/] entry = filtered[aClassListViewActivity.listedElement.name.toUpperFirst()/]List.get(position);
		entry.setContextDB(_contextDB);
        if (convertView == null) {
            LayoutInflater inflater = (LayoutInflater) context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(R.layout.[aClassListViewActivity.name.toLower()/]_listviewrow, null);
        }
       
		// set data in the row 
		TextView tvLabel = (TextView) convertView.findViewById(R.id.[aClassListViewActivity.name.toLower()/]_listviewrow_label);
        StringBuilder labelSB = new StringBuilder();
		[for (dataAtt : DataAttribute | aClassListViewActivity.presentedDetail.mainAttributes)]
			[if(dataAtt.type.instanceClassName = 'java.lang.String')]
				labelSB.append(entry.get[dataAtt.name.toUpperFirst()/]());
			[else]
				labelSB.append(entry.get[dataAtt.name.toUpperFirst()/]().toString());
			[/if]
			
			labelSB.append(" ");
		[/for]
        tvLabel.setText(labelSB.toString());

		[if((aClassListViewActivity.presentedDetail.secondaryAttributes->size()) > 0)]
        TextView tvDetails = (TextView) convertView.findViewById(R.id.[aClassListViewActivity.name.toLower()/]_listviewrow_details);
		StringBuilder detailsSB = new StringBuilder();
			[for (dataAtt : DataAttribute | aClassListViewActivity.presentedDetail.secondaryAttributes)]
		detailsSB.append(entry.get[dataAtt.name.toUpperFirst()/]().toString());
		detailsSB.append(" ");
			[/for]
        tvDetails.setText(detailsSB.toString());
		[/if]
		
        // assign the entry to the row in order to ease GUI interactions
        LinearLayout llRow = (LinearLayout)convertView.findViewById(R.id.[aClassListViewActivity.name.toLower()/]_listviewrow);
        llRow.setTag(entry);
        
		// [protected ('protected additional '+aClassListViewActivity.name+'_Adapter getView code')]
		//	additional code
		// [/protected]

        return convertView;

	}

	protected boolean sortAfterFilter() {
		return false;
	}
	
	public int filter(int position, Fiche fiche, String pattern){
		// [protected ('protected additional '+aClassListViewActivity.name+'_Adapter filter code')]
		// TODO probablement faire en sorte d'ignorer les accents pour la recherche
		// TODO chercher séparement les mots (séparés par un blanc) et faire un "ET" 
		if(fiche.getNomCommun().toLowerCase().contains(pattern)) return 1;
		else if(fiche.getNomScientifique().toLowerCase().contains(pattern)) return 1;
		//else if(fiche.getAutresDenominations().contains(pattern)) return 1; 
		else return -1;
		// [/protected]
	}
	
	@Override
	public Filter getFilter() {
		if (mFilter == null) {
			mFilter = new SimpleFilter();
		}
		return mFilter;
	}
	
	private class SimpleFilter extends Filter {

		@Override
		protected FilterResults performFiltering(CharSequence prefix) {
			FilterResults results = new FilterResults();

			/*if (ficheList == null) {
				synchronized (mLock) {
					ficheList = new ArrayList<Fiches>(mObjects);
				}
			}*/

			if (prefix == null || prefix.length() == 0) {
				synchronized (mLock) {
					ArrayList<Fiche> list = new ArrayList<[aClassListViewActivity.listedElement.name.toUpperFirst()/]>([aClassListViewActivity.listedElement.name.toLowerFirst()/]List);
					results.values = list;
					results.count = list.size();
				}
			} else {
				String prefixString = prefix.toString().toLowerCase();
				boolean sort = sortAfterFilter();

				final List<Fiche> values = ficheList;
				final int count = values.size();
				
				final ArrayList<[aClassListViewActivity.listedElement.name.toUpperFirst()/]> newValues = new ArrayList<[aClassListViewActivity.listedElement.name.toUpperFirst()/]>(count);
				final int['[]'/] orders = sort ? new int['['/]count[']'/] : null;

				for (int i = 0; i < count; i++) {
					final Fiche value = values.get(i);
					int order = ListeFicheAvecFiltre_Adapter.this.filter(i, value, prefixString);
					if (order >= 0) {
						if (sort)
							orders['['/]newValues.size()[']'/] = order;
						newValues.add(value);
					}
				}
				
				if (sort) {
					Comparator<[aClassListViewActivity.listedElement.name.toUpperFirst()/]> c = new Comparator<[aClassListViewActivity.listedElement.name.toUpperFirst()/]>() {
						public int compare([aClassListViewActivity.listedElement.name.toUpperFirst()/] object1, [aClassListViewActivity.listedElement.name.toUpperFirst()/] object2) {
							// [protected ('protected additional '+aClassListViewActivity.name+'_Adapter compare code')]
							int i1 = newValues.indexOf(object1);
							int i2 = newValues.indexOf(object2);
							return orders['['/]i1[']'/] - orders['['/]i2[']'/];
							// [/protected]
						}
					};
					Collections.sort(newValues, c);
				}

				results.values = newValues;
				results.count = newValues.size();
			}

			return results;
		}

		@SuppressWarnings("unchecked")
		@Override
		protected void publishResults(CharSequence constraint, FilterResults results) {
			filtered[aClassListViewActivity.listedElement.name.toUpperFirst()/]List = (List<[aClassListViewActivity.listedElement.name.toUpperFirst()/]>) results.values;
			if (results.count > 0) {
				notifyDataSetChanged();
			} else {
				notifyDataSetInvalidated();
			}
		}
	}
}
[/file]
[/template]

