[comment encoding = UTF-8 /]
[module generateDataAssociation('http://genandroid/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import fr::vojtisek::genandroid::acceleo::common::commonTemplate/]

[template public generateDataAssociationFile(aDataAssociation : DataAssociation)]

[file ('/'+aDataAssociation.eContainer(AndroidProject).javaSourceFolder
+aDataAssociation.references->first().eContainer().oclAsType(DataClass).packagePrefixFolder()
+'/datamodel/associations/'.concat(aDataAssociation.name).concat('.java'), false, 'UTF-8')]
/* [aDataAssociation.eContainer().eContainer().oclAsType(AndroidProject).fileHeader/] */
package [aDataAssociation.references->first().eContainer().oclAsType(DataClass).packagePrefix()/].datamodel.associations;

import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

import java.sql.SQLException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import [aDataAssociation.references->first().eContainer().oclAsType(DataClass).packagePrefix()/].datamodel.*;

/** 
  * [aDataAssociation.documentation/] 
  */ 
@DatabaseTable(tableName = "[aDataAssociation.name.toLowerFirst()/]")
public class [aDataAssociation.name.toUpperFirst()/] {
 
	public static Log log = LogFactory.getLog([aDataAssociation.name.toUpperFirst()/].class);

	[let leftClass : DataClass = aDataAssociation.references->first().eContainer().oclAsType(DataClass)]
	[let rightClass : DataClass = aDataAssociation.references->last().eContainer().oclAsType(DataClass)]
	
	public final static String [leftClass.name.toUpper()/]_ID_FIELD_NAME = "[leftClass.name.toUpperFirst()/]_id";
	public final static String [rightClass.name.toUpper()/]_ID_FIELD_NAME = "[rightClass.name.toUpperFirst()/]_id";

	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;
	
	// This is a foreign object which just stores the id from the User object in this table.
	@DatabaseField(foreign = true, columnName = [leftClass.name.toUpper()/]_ID_FIELD_NAME)
	[leftClass.name.toUpperFirst()/] [leftClass.name.toLowerFirst()/];

	// This is a foreign object which just stores the id from the Post object in this table.
	@DatabaseField(foreign = true, columnName = [rightClass.name.toUpper()/]_ID_FIELD_NAME)
	[rightClass.name.toUpperFirst()/] [rightClass.name.toLowerFirst()/];

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	protected [aDataAssociation.eContainer(DataModel).name.toUpperFirst()/]Helper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	public boolean _[leftClass.name.toLowerFirst()/]_mayNeedDBRefresh = true;
	public boolean _[rightClass.name.toLowerFirst()/]_mayNeedDBRefresh = true;

	[aDataAssociation.name.toUpperFirst()/]() {
		// for ormlite
	}

	public [aDataAssociation.name.toUpperFirst()/]([leftClass.name.toUpperFirst()/] [leftClass.name.toLowerFirst()/], [rightClass.name.toUpperFirst()/] [rightClass.name.toLowerFirst()/]) {
		this.[leftClass.name.toLowerFirst()/] = [leftClass.name.toLowerFirst()/];
		this.[rightClass.name.toLowerFirst()/] = [rightClass.name.toLowerFirst()/];
	}

	/** accessors for Left part */  
	public [leftClass.name.toUpperFirst()/] get[leftClass.name.toUpperFirst()/]() {
		try {
			if(_[leftClass.name.toLowerFirst()/]_mayNeedDBRefresh && _contextDB != null){
				_contextDB.[leftClass.name.toLowerFirst()/]Dao.refresh(this.[leftClass.name.toLowerFirst()/]);
				this.[leftClass.name.toLowerFirst()/].setContextDB(_contextDB);
				_[leftClass.name.toLowerFirst()/]_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.[leftClass.name.toLowerFirst()/] == null){
			log.warn("[aDataAssociation.name.toUpperFirst()/] may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.[leftClass.name.toLowerFirst()/];
	}
	public void set[leftClass.name.toUpperFirst()/]([leftClass.name.toUpperFirst()/] [leftClass.name.toLowerFirst()/]) {
		this.[leftClass.name.toLowerFirst()/] = [leftClass.name.toLowerFirst()/];
	}

	/** accessors for Right part */ 
	public [rightClass.name.toUpperFirst()/] get[rightClass.name.toUpperFirst()/]() {
		try {
			if(_[rightClass.name.toLowerFirst()/]_mayNeedDBRefresh && _contextDB != null){
				_contextDB.[rightClass.name.toLowerFirst()/]Dao.refresh(this.[rightClass.name.toLowerFirst()/]);
				this.[rightClass.name.toLowerFirst()/].setContextDB(_contextDB);
				_[rightClass.name.toLowerFirst()/]_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.[rightClass.name.toLowerFirst()/] == null){
			log.warn("[aDataAssociation.name.toUpperFirst()/] may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.[rightClass.name.toLowerFirst()/];
	}
	public void set[rightClass.name.toUpperFirst()/]([rightClass.name.toUpperFirst()/] [rightClass.name.toLowerFirst()/]) {
		this.[rightClass.name.toLowerFirst()/] = [rightClass.name.toLowerFirst()/];
	}

	[/let]
	[/let]

	public [aDataAssociation.eContainer(DataModel).name.toUpperFirst()/]Helper getContextDB(){
		return _contextDB;
	}
	public void setContextDB([aDataAssociation.eContainer(DataModel).name.toUpperFirst()/]Helper contextDB){
		this._contextDB = contextDB;
	}
}
[/file]
[/template]




