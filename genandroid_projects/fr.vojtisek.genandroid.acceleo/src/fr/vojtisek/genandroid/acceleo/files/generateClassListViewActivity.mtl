[comment encoding = UTF-8 /]
[module generateClassListViewActivity('http://genandroid/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import fr::vojtisek::genandroid::acceleo::common::commonTemplate/]
[import fr::vojtisek::genandroid::acceleo::common::commonActivityTemplate/]

[template public generateClassListViewActivity_Class(aClassListViewActivity : ClassListViewActivity)]

[file ('/'+aClassListViewActivity.eContainer(AndroidProject).javaSourceFolder+aClassListViewActivity.packagePrefixFolder()+'/activities/'+aClassListViewActivity.name+'_ClassListViewActivity.java', false, 'UTF-8')]
/* [aClassListViewActivity.eContainer(AndroidProject).fileHeader/] */
package [aClassListViewActivity.packagePrefix()/].activities;


[if(aClassListViewActivity.useIndexSearch)]
import java.util.HashMap;
import [aClassListViewActivity.packagePrefix()/].activities.view.indexbar.ActivityWithIndexBar;
import [aClassListViewActivity.packagePrefix()/].activities.view.indexbar.IndexBarHandler;
[/if]
import [aClassListViewActivity.packagePrefix()/].datamodel.*;
import [aClassListViewActivity.packagePrefix()/].R;
import fr.vojtisek.genandroid.genandroidlib.activities.OrmLiteActionBarActivity;

[if(aClassListViewActivity.isFilterable)]
import android.app.SearchManager;
import android.content.Context;
[/if]
import android.content.Intent;
[if(aClassListViewActivity.isFilterable)]
import android.os.Build;
[/if]
import android.os.Bundle;
[if(aClassListViewActivity.useIndexSearch)]
import android.os.Handler;
import android.widget.LinearLayout;
[/if]
[if(aClassListViewActivity.hasSupportForParentActivity)]
import android.support.v4.app.TaskStackBuilder;
[/if]
import android.support.v7.app.ActionBar;
[if(aClassListViewActivity.isFilterable)]
import android.support.v4.view.MenuItemCompat;
import android.support.v7.widget.SearchView;
[/if]
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
[if(aClassListViewActivity.useIndexSearch)]
import android.widget.TextView;
[/if]
import android.widget.Toast;
// [protected ('protected'.concat(aClassListViewActivity.name).concat('_ClassListViewActivity_additionalimports'))]
import [aClassListViewActivity.packagePrefix()/].tools.ThemeUtil;
// [/protected]

public class [aClassListViewActivity.name/]_ClassListViewActivity extends OrmLiteActionBarActivity<OrmLiteDBHelper> implements OnItemClickListener [if(aClassListViewActivity.useIndexSearch)], ActivityWithIndexBar[/if]{
	
	private static final String LOG_TAG = [aClassListViewActivity.name/]_ClassListViewActivity.class.getSimpleName();

	//[protected ('constants '+aClassListViewActivity.name+'_ClassListViewActivity')]
	//[/protected]
	
    [aClassListViewActivity.name/]_Adapter adapter;

	[if(aClassListViewActivity.useIndexSearch)]
	Handler mHandler;
    HashMap<Character, Integer> alphabetToIndex;
	int number_of_alphabets=-1;
	[/if]

	public void onCreate(Bundle bundle) {
		super.onCreate(bundle);
		//[protected ('onCreate '+aClassListViewActivity.name+'_ClassListViewActivity_1')]
		ThemeUtil.onActivityCreateSetTheme(this);
		//[/protected]
		setContentView(R.layout.[aClassListViewActivity.name.toLower()/]_listview);

	[if(aClassListViewActivity.hasSupportForParentActivity)]
		ActionBar actionBar = getSupportActionBar();
	    actionBar.setDisplayHomeAsUpEnabled(true);

	[/if]
		ListView list = (ListView) findViewById(R.id.[aClassListViewActivity.name.toLower()/]_listview);
	[if(not (aClassListViewActivity.selectItemAction = null))]
        list.setClickable(true);
	[else]
        list.setClickable(false);
	[/if]
		//[protected ('onCreate '+aClassListViewActivity.name+'_ClassListViewActivity adapter creation')]
        adapter = new [aClassListViewActivity.name/]_Adapter(this, getHelper().get[aClassListViewActivity.eContainer(AndroidProject).dataModel.name/]Helper());		
		//[/protected]
		// avoid opening the keyboard on view opening
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        list.setOnItemClickListener(this);

        list.setAdapter(adapter);

	[if(aClassListViewActivity.isFilterable)] 
		// Get the intent, verify the action and get the query
        handleIntent(getIntent());

	[/if]
	[if(aClassListViewActivity.useIndexSearch)]
		// add handler for indexBar
        mHandler = new IndexBarHandler(this);
	[/if]
		//[protected ('onCreate additions '+aClassListViewActivity.name+'_ClassListViewActivity')]
		//[/protected]
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		//[protected ('onResume additions '+aClassListViewActivity.name+'_ClassListViewActivity')]
		//[/protected]
	[if(aClassListViewActivity.useIndexSearch)]
		populateIndexBarHashMap();
	[/if]
	}

	[if(aClassListViewActivity.isFilterable)] 
	@Override
    protected void onNewIntent(Intent intent) {
        // Because this activity has set launchMode="singleTop", the system calls this method
        // to deliver the intent if this activity is currently the foreground activity when
        // invoked again (when the user executes a search from this activity, we don't create
        // a new instance of this activity, so the system delivers the search intent here)
        handleIntent(intent);
    }
	
	private void handleIntent(Intent intent) {
		//Log.d(LOG_TAG,"Intent received");
        if (Intent.ACTION_VIEW.equals(intent.getAction())) {
           // handles a click on a search suggestion; launches activity to show word
           //  Intent wordIntent = new Intent(this, WordActivity.class);
           // wordIntent.setData(intent.getData());
           // startActivity(wordIntent);
        } else if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
            // handles a search query
            String query = intent.getStringExtra(SearchManager.QUERY);
    		Log.d(LOG_TAG,"ACTION_SEARCH Intent received for "+query);
            [aClassListViewActivity.name/]_ClassListViewActivity.this.adapter.getFilter().filter(query);
        }
    }	

	@Override
	public boolean onSearchRequested() {
		Log.d(LOG_TAG,"onSearchRequested received");
	    return super.onSearchRequested();
	}
	[/if]

	public void onItemClick(AdapterView<?> arg0, View view, int position, long index) {
		[if(aClassListViewActivity.useIndexSearch)]
		Log.d(LOG_TAG, "onItemClick "+view);
		if(view instanceof LinearLayout && view.get_id() == R.id.[aClassListViewActivity.name.toLower()/]_listviewrow){
			// normal case on main item
		[/if]
		[if(selectItemAction <> null)]
	        Intent toDetailView = new Intent(this, [selectItemAction.name/]_ElementViewActivity.class);
	        Bundle b = new Bundle();
	        b.putInt("[aClassListViewActivity.listedElement.name.toLowerFirst()/]Id", (([aClassListViewActivity.listedElement.name/])view.getTag()).get_id());
			toDetailView.putExtras(b);
	        startActivity(toDetailView);
		[else]
			//[protected ('onItemClick additions '+aClassListViewActivity.name+'_ClassListViewActivity')]
			showToast(view.toString() + ", "+ view.get_id());
			//[/protected]		
		[/if]
		[if(aClassListViewActivity.useIndexSearch)]
		}
		else if(view instanceof TextView && view.get_id() == R.id.indexbar_alphabtes_row_textview){
			// click on indexBar
			TextView rowview=(TextView)view;
			
			CharSequence alpahbet=rowview.getText();
			
			if(alpahbet==null || alpahbet.equals(""))
				return;
			
			String selected_alpahbet=alpahbet.toString().trim();
			Integer newPosition=alphabetToIndex.get(selected_alpahbet.charAt(0));
			Log.d(LOG_TAG, "Selected Alphabet is:"+selected_alpahbet+"   position is:"+newPosition);
			if(	newPosition != null){	
				Toast.makeText(this, selected_alpahbet, Toast.LENGTH_SHORT).show();
				ListView listview=(ListView)findViewById(R.id.[aClassListViewActivity.name.toLower()/]_listview);
				listview.setSelection(newPosition);
			}
		}
		[/if]		
    }

	//[protected ('additional  '+aClassListViewActivity.name+'_ClassListViewActivity methods')]

	//[/protected]

	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
		// add options in the menu
		MenuInflater inflater = getMenuInflater();
	    inflater.inflate(R.menu.[aClassListViewActivity.name.toLower()/]_classlistview_actions, menu);
	[if(aClassListViewActivity.isFilterable)]
		// Associate searchable configuration with the SearchView
		// deal with compat
		MenuItem  menuItem = (MenuItem ) menu.findItem(R.id.[aClassListViewActivity.name.toLower()/]_classlistview_action_search);
		SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);
	    SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);
		searchView.setSearchableInfo( searchManager.getSearchableInfo(getComponentName()));
	    searchView.setIconifiedByDefault(false);
    	searchView.setOnQueryTextListener( new SearchView.OnQueryTextListener() {
			
			@Override
			public boolean onQueryTextSubmit(String arg0) {
				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
					// already done by normal
				}
				else{
					[aClassListViewActivity.name.toUpperFirst()/]_ClassListViewActivity.this.adapter.getFilter().filter(arg0);
				}
				return false;
			}
			
			@Override
			public boolean onQueryTextChange(String arg0) {
				// TODO must be careful if the request might be long
				// action on text change
				[aClassListViewActivity.name.toUpperFirst()/]_ClassListViewActivity.this.adapter.getFilter().filter(arg0);
				return false;
			}
		});
	    
	[/if]
		// add additional programmatic options in the menu
		//[protected ('additional onCreateOptionsMenu '+aClassListViewActivity.name+'_ClassListViewActivity')]

		//[/protected]
        return super.onCreateOptionsMenu(menu);
    }
    
    
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
		// behavior of option menu
        switch (item.getItemId()) {
		[if(not aClassListViewActivity.eContainer(AndroidProject).presentationModel.preferenceView.oclIsUndefined())]
			case R.id.[aClassListViewActivity.name.toLower()/]_classlistview_action_preference:
	        	startActivity(new Intent(this, [aClassListViewActivity.eContainer(AndroidProject).presentationModel.preferenceView.name.toUpperFirst()/]_PreferenceViewActivity.class));
	            return true;
		[/if]
			//[protected ('additional menu action '+aClassListViewActivity.name+'_ClassListViewActivity')]
	
			//[/protected]
		[if(aClassListViewActivity.hasSupportForParentActivity and not aClassListViewActivity.defaultParentActivity.oclIsUndefined())]
			// Respond to the action bar's Up/Home button
			case android.R.id.home:
	        	TaskStackBuilder.create(this)
	                // Add all of this activity's parents to the back stack
	                .addNextIntentWithParentStack(getSupportParentActivityIntent())
	                // Navigate up to the closest parent
	                .startActivities();
	            return true;
		[/if]
			default:
                return super.onOptionsItemSelected(item);
        }
    }

	[if(aClassListViewActivity.hasSupportForParentActivity)]
	//  ------------ dealing with Up button
	@Override
	public Intent getSupportParentActivityIntent() {
		//[protected ('getSupportParentActivityIntent '+aClassListViewActivity.name+'_ClassListViewActivity')]
		// navigates to the parent activity
		return new Intent(this, [aClassListViewActivity.defaultParentActivity.name/]_[aClassListViewActivity.defaultParentActivity.eClass().name/].class);
		//[/protected]
	}
	@Override
	public void onCreateSupportNavigateUpTaskStack(TaskStackBuilder builder) {
		//[protected ('onCreateSupportNavigateUpTaskStack '+aClassListViewActivity.name+'_ClassListViewActivity')]
		super.onCreateSupportNavigateUpTaskStack(builder);
		//[/protected]
	}
	[/if]
	[if(aClassListViewActivity.useIndexSearch)]
	// -------------- handler (for indexBar)
	@Override
	public Handler getHandler() {
		return mHandler;
	}
	
	public void populateIndexBarHashMap() {
		alphabetToIndex= adapter.getUsedAlphabetHashMap();
		number_of_alphabets=alphabetToIndex.size();		//Number of enteries in the map is equal to number of letters that would necessarily display on the right.
		
		/*Now I am making an entry of those alphabets which are not there in the Map*/
		String alphabets['[]'/]=getResources().getStringArray(R.array.alphabtes_array);
		int index=-1;
		
		for(String alpha1: alphabets){
			char alpha=alpha1.charAt(0);
			index++;
			
			if(alphabetToIndex.containsKey(alpha))
				continue;

			/*Start searching the next character position. Example, here alpha is E. Since there is no entry for E, we need to find the position of next Character, F.*/
			for(int i=index+1  ; i< 27 ;i++){		//start from next character to last character
				char searchAlphabet=alphabets['[i]'/].charAt(0);   
				
				/*If we find the position of F character, then on click event on E should take the user to F*/	
				if(  alphabetToIndex.containsKey(searchAlphabet)){
					alphabetToIndex.put(alpha, alphabetToIndex.get(searchAlphabet));
					break;
				}
				else
					if(i==26) /*If there are no entries after E, then on click event on E should take the user to end of the list*/
			[if(aClassListViewActivity.isLargeList)]
						alphabetToIndex.put(alpha, adapter.filtered[aClassListViewActivity.listedElement.name.toUpperFirst()/]IdList.size()-1);
			[else]
						alphabetToIndex.put(alpha, adapter.filtered[aClassListViewActivity.listedElement.name.toUpperFirst()/]List.size()-1);
			[/if]
					else
						continue;
					
			}//
		}//
	}
	
	@Override
	public ListView getAlphabetListView() {
		return (ListView)findViewById(R.id.[aClassListViewActivity.name.toLower()/]_listView_alphabets);
	}
	public View getAlphabetRowView(){
		return findViewById(R.id.alphabet_row_layout);
	}
	[/if]

	// [protected ('protected'.concat(aClassListViewActivity.name).concat('_ClassListViewActivity'))]
	public void onClickFilterBtn(View view){
		showToast("filter button pressed. \nPlease customize ;-)");
    }
	// [/protected]

	
}
[/file]
[/template]

