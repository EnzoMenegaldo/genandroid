[comment encoding = UTF-8 /]
[module generateSQLiteDAOHelper('http://genandroid/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import fr::vojtisek::genandroid::acceleo::common::commonTemplate/]

[template public generateSQLiteDAOHelper(aAndroidProject : AndroidProject)]

[file ('/'+aAndroidProject.javaSourceFolder+aAndroidProject.packagePrefixFolder()+'/datamodel/'+projectName4Class(aAndroidProject)+'DbAdapter.java', false, 'UTF-8')]
/* [aAndroidProject.fileHeader/] */
package fr.vojtisek.testgenapp.datamodel;

import android.content.ContentValues;
import android.content.Context;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class [projectName4Class(aAndroidProject)/]DbAdapter {
	
	public static final String TAG = "[projectName4Class(aAndroidProject)/]DbAdapter";
	
	private SQLiteDBHelper dbHelper;
    private SQLiteDatabase db;
    private final Context context;

	public [projectName4Class(aAndroidProject)/]DbAdapter(Context context) {
        this.context = context;
    }

    public [projectName4Class(aAndroidProject)/]DbAdapter open() throws SQLException {
        dbHelper = new SQLiteDBHelper(context);
        db = dbHelper.getWritableDatabase();
        return this;
    }
    
    public void close() {
        dbHelper.close();
    }

	public class SQLiteDBHelper extends SQLiteOpenHelper {
		
		
		public static final String DATABASE_NAME = "[aAndroidProject.name/].db";
	
		// any time you make changes to your database objects, you may have to increase the database version
		//[protected ('SQLiteDAOHelper.version.protected')]
		private static final int DATABASE_VERSION = 1;
		//[/protected]
	
		[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
			[if (aDataClass.oclIsKindOf(DataClass) and aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
		public static final String DATABASE_TABLE_[aDataClass.name.toUpper()/] = "[aDataClass.name.toLower()/]Classes";
		private static final String DATABASE_TABLE_[aDataClass.name.toUpper()/]_CREATE =
	            "create table [aDataClass.name.toLower()/]Classes (_id integer primary key autoincrement"
	    		[for (att : DataAttribute | aDataClass.oclAsType(DataClass).dataAttributes)]
					[if (att.type.instanceClassName = 'java.lang.String')]
	                    + ", [att.name.toLower()/] text not null"
					[elseif (att.type.instanceClassName = 'int')]
	                    + ", [att.name.toLower()/] integer not null"
					[/if]
				[/for]
	                    + ");";
			[/if]
		[/for]
	
		[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
			[if (aDataClass.oclIsKindOf(DataClass) and aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
		//public static final String DATABASE_TABLE_[aDataClass.name.toUpper()/] = "[aDataClass.name.toLower()/]Classes";
			[/if]
		[/for]
		
	
	
	    SQLiteDBHelper(Context context) {
	        super(context, DATABASE_NAME, null, DATABASE_VERSION);
	    }
	
	    @Override
	    public void onCreate(SQLiteDatabase db) {
		[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
			[if (aDataClass.oclIsKindOf(DataClass) and aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
		 	db.execSQL(DATABASE_TABLE_[aDataClass.name.toUpper()/]_CREATE);
			[/if]
		[/for]
	    }
	
	    @Override
	    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
	        Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
	                + newVersion);
		[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
			[if (aDataClass.oclIsKindOf(DataClass) and aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
	        db.execSQL("DROP TABLE IF EXISTS "+ DATABASE_TABLE_[aDataClass.name.toUpper()/]);
			[/if]
		[/for]
	        onCreate(db);
	    }
		@Override
		public synchronized void close() {
			super.close();
		}
	}

	[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
		[if (aDataClass.oclIsKindOf(DataClass) and aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
	/** insert this new [aDataClass.name.toUpperFirst()/] into the table
      * @return the row at which it was inserted, the object id is also updated accordingly
      */
	public long insert([aDataClass.name.toUpperFirst()/] a[aDataClass.name.toUpperFirst()/]) {
        
		ContentValues args = new ContentValues();
        [for (att : DataAttribute | aDataClass.oclAsType(DataClass).dataAttributes)]
        args.put("[att.name.toLower()/]",  a[aDataClass.name.toUpperFirst()/].[att.name.toLowerFirst()/]);
        [/for]

		a[aDataClass.name.toUpperFirst()/].setId(db.insert(SQLiteDBHelper.DATABASE_TABLE_[aDataClass.name.toUpper()/], null, args));
        return a[aDataClass.name.toUpperFirst()/].getId();
    }
		[/if]
	[/for]
	[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
		[if (aDataClass.oclIsKindOf(DataClass) and aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
	/** insert this new [aDataClass.name.toUpperFirst()/] into the table
      * @return the row at which it was inserted, the object id is also updated accordingly
      */
	public boolean update([aDataClass.name.toUpperFirst()/] a[aDataClass.name.toUpperFirst()/]) {
        
		ContentValues args = new ContentValues();
        [for (att : DataAttribute | aDataClass.oclAsType(DataClass).dataAttributes)]
        args.put("[att.name.toLower()/]",  a[aDataClass.name.toUpperFirst()/].[att.name.toLowerFirst()/]);
        [/for]

 		return db.update(SQLiteDBHelper.DATABASE_TABLE_[aDataClass.name.toUpper()/], args, "_id=" + a[aDataClass.name.toUpperFirst()/].getId(), null) > 0;
    }
		[/if]
	[/for]

	[for (aDataClass : DataClassifier | aAndroidProject.dataModel.dataClasses)]
		[if (aDataClass.oclIsKindOf(DataClass) and aDataClass.oclAsType(DataClass).storage = storageKind::SQLite)]
	public boolean delete[aDataClass.name.toUpperFirst()/](long rowId) {
        return db.delete(SQLiteDBHelper.DATABASE_TABLE_[aDataClass.name.toUpper()/],"_id=" + rowId, null) > 0;
    }
	public boolean delete([aDataClass.name.toUpperFirst()/] a[aDataClass.name.toUpperFirst()/]) {
        return db.delete(SQLiteDBHelper.DATABASE_TABLE_[aDataClass.name.toUpper()/],"_id=" + a[aDataClass.name.toUpperFirst()/].getId(), null) > 0;
    }
		[/if]
	[/for]

}
[/file]
[/template]
[template public allEAttributesParam (anEClass : EClass) ]
[anEClass.eAttributes.oneEAttributeParam()->sep(', ')/]
[/template]

[template public oneEAttributeParam (att : EAttribute) ]
[att.eType.instanceClassName/] [att.name.toLowerFirst()/]
[/template]

[template public projectName4Class (aAndroidProject : AndroidProject) ]
[aAndroidProject.name.toUpperFirst().replaceAll('\\.', '')/]
[/template]
