[comment encoding = UTF-8 /]
[module generateDataClass('http://genandroid/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import fr::vojtisek::genandroid::acceleo::common::commonTemplate/]

[template public generateDataClassFile(aDataClass : DataClass)]

[file ('/src/'+aDataClass.packagePrefixFolder()+'/datamodel/'.concat(aDataClass.eClass.name).concat('.java'), false, 'UTF-8')]

/*******************************************************************************
 * Copyright (c) 2012 Vojtisek.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Didier Vojtisek - initial API and implementation
 *******************************************************************************/
package [aDataClass.packagePrefix()/].datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;

@DatabaseTable(tableName = "[aDataClass.eClass.name.toLowerFirst()/]")
public class [aDataClass.eClass.name.toUpperFirst()/] {

	public static final String XML_[aDataClass.eClass.name.toUpper()/] = "[aDataClass.eClass.name.toUpper()/]";
	public static final String XML_ATT_ID = "id";
	[for (att : EAttribute | aDataClass.eClass.eAttributes)]
		[if (att.upperBound = 1)]
	public static final String XML_ATT_[att.name.toUpper()/] = "[att.name.toLowerFirst()/]";
		[else]
	public static final String XML_ATT_[att.name.toUpper()/] = "[att.name.toUpper()/]";
		[/if]
	[/for]
	
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;
	
	[for (att : EAttribute | aDataClass.eClass.eAttributes)]
		[if (att.upperBound = 1)]
	@DatabaseField
	protected [att.oneEAttributeParam()/];
		[else]
	// NOT Implemented<[att.eType.instanceClassName/]> [att.name.toLowerFirst()/];
		[/if]
	[/for]
	
	[for (ref : EReference | aDataClass.eClass.eReferences)]
		[if (ref.upperBound = 1 and not ref.eOpposite.oclIsUndefined())]
	@DatabaseField(foreign = true) //, columnName = USER_ID_FIELD_NAME)
	protected [ref.oneEReferenceParam()/];
		[elseif (ref.upperBound = 1 and ref.eOpposite.oclIsUndefined())]
	// TODO single reference 
	// protected [ref.oneEReferenceParam()/];
		[elseif (ref.upperBound <> 1 and ref.eOpposite.upperBound <> 1)]
	// TODO many 2 many not supported yet, use simple one to many for the moment, you'll have to maintain the coherence manually for the moment
	@ForeignCollectionField(eager = false, foreignFieldName = "[ref.eOpposite.name/]_one")
	protected ForeignCollection<[ref.eType.name/]> [ref.name.toLowerFirst()/];
	@DatabaseField(foreign = true) 
	protected [ref.oneEReferenceParam()/]_one;
		[else]
	@ForeignCollectionField(eager = false, foreignFieldName = "[ref.eOpposite.name/]")
	protected ForeignCollection<[ref.eType.name/]> [ref.name.toLowerFirst()/];
		[/if]
	[/for]
	// [protected (aDataClass.eClass.name.concat(' additional properties'))]
	// [/protected]
	
	public [aDataClass.eClass.name.toUpperFirst()/]() {}// needed by ormlite
	public [aDataClass.eClass.name.toUpperFirst()/]([aDataClass.eClass.allEAttributesParam()/]) {
		super();
	[for (att : EAttribute | aDataClass.eClass.eAttributes)]
		[if (att.upperBound = 1)]
		this.[att.name.toLowerFirst()/] = [att.name.toLowerFirst()/];
		[/if]
	[/for]
	} 

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	[for (att : EAttribute | aDataClass.eClass.eAttributes)]
		[if (att.upperBound = 1)]
	public [att.eType.instanceClassName/] get[att.name.toUpperFirst()/]() {
		return this.[att.name.toLowerFirst()/];
	}
	public void set[att.name.toUpperFirst()/]([att.eType.instanceClassName/] [att.name.toLowerFirst()/]) {
		this.[att.name.toLowerFirst()/] = [att.name.toLowerFirst()/];
	}
		[/if]
	[/for]

	public String toXML(){
		StringBuilder sb = new StringBuilder();
		sb.append("<");
    	sb.append(XML_[aDataClass.eClass.name.toUpper()/]);
		sb.append(" ");
    	sb.append(XML_ATT_ID);
    	sb.append("=\"");
		sb.append(this._id);
    	sb.append("\" ");
	[for (att : EAttribute | aDataClass.eClass.eAttributes)]
		[if (att.upperBound = 1)]
		sb.append(" ");
    	sb.append(XML_ATT_[att.name.toUpper()/]);
    	sb.append("=\"");
		sb.append(this.[att.name.toLowerFirst()/]);
    	sb.append("\" ");
		[/if]
	[/for]
    	sb.append(">");

		// TODO deal with other case

		sb.append("</");
    	sb.append(XML_[aDataClass.eClass.name.toUpper()/]);
    	sb.append(">");
		return sb.toString();
	}
}
[/file]
[/template]




