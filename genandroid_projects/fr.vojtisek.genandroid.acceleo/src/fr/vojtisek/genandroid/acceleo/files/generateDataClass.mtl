[comment encoding = UTF-8 /]
[module generateDataClass('http://genandroid/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]
[import fr::vojtisek::genandroid::acceleo::common::commonTemplate/]

[template public generateDataClassFile(aDataClass : DataClass)]

[file ('/src/'+aDataClass.packagePrefixFolder()+'/datamodel/'.concat(aDataClass.name).concat('.java'), false, 'UTF-8')]
/* [aDataClass.eContainer().eContainer().oclAsType(AndroidProject).fileHeader/] */
package [aDataClass.packagePrefix()/].datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import java.sql.SQLException;
import java.util.List;

import [aDataClass.packagePrefix()/].datamodel.associations.*;

/** 
  * [aDataClass.documentation/] 
  */ 
@DatabaseTable(tableName = "[aDataClass.name.toLowerFirst()/]")
public class [aDataClass.name.toUpperFirst()/] {

	public static final String XML_[aDataClass.name.toUpper()/] = "[aDataClass.name.toUpper()/]";
	public static final String XML_ATT_ID = "id";
	[for (att : DataAttribute | aDataClass.dataAttributes)]
		[if (att.upperBound = 1)]
	public static final String XML_ATT_[att.name.toUpper()/] = "[att.name.toLowerFirst()/]";
		[else]
	public static final String XML_ATT_[att.name.toUpper()/] = "[att.name.toUpper()/]";
		[/if]
	[/for]
	
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;
	
	[for (att : DataAttribute | aDataClass.dataAttributes)]

		[if(not att.documentation.oclIsUndefined())]
	/** [att.documentation/] */ 
		[/if]
		[if (att.upperBound = 1)]
			[if (att.storage = storageKind::SQLite)] 
	@DatabaseField
			[/if]
	protected [att.oneEAttributeParam()/];
		[else]
	// NOT Implemented<[att.type.instanceClassName/]> [att.name.toLowerFirst()/];
		[/if]
	[/for]
	
	[for (ref : DataReference | aDataClass.dataReferences)]

		[if(not ref.documentation.oclIsUndefined())]
	/** [ref.documentation/] */ 
		[/if]
		[if (ref.opposite.oclIsUndefined())] [comment no opposite /]
			[if (ref.upperBound = 1)]
				[if (ref.storage = storageKind::SQLite)]
	@DatabaseField(foreign = true)
				[/if]
	protected [ref.oneEReferenceParam()/];
			[else] [comment management of references with multiplicity <> 1 but no opposite /]
				[if (ref.storage = storageKind::SQLite)]
	@ForeignCollectionField(eager = false)
	protected ForeignCollection<[ref.type.name/]> [ref.name.toLowerFirst()/];
				[else]
	// NOT Implemented non SQLite collection reference (no opposite) [ref.name.toLowerFirst()/];
				[/if]
			[/if]
		[else]
			[comment management of references with opposite/]
			[if (ref.upperBound = 1)]
				[if (ref.storage = storageKind::SQLite)]
	@DatabaseField(foreign = true) //, columnName = USER_ID_FIELD_NAME)
				[/if]
	protected [ref.oneEReferenceParam()/];
			[else] [comment management of references with opposite and multiplicity <> 1 /]
				[if (ref.opposite.references->select(otherRef : DataReference | otherRef <> ref)->first().upperBound <> 1)]	
					[if (ref.storage = storageKind::SQLite)]
	public List<[ref.type.name.toUpperFirst()/]> lookup[ref.name.toUpperFirst()/]([aDataClass.eContainer().eContainer().oclAsType(AndroidProject).dataModel.name.toUpperFirst()/]Helper contextDB) throws SQLException {
		if ([ref.name.toLowerFirst()/]Query == null) {
			[ref.name.toLowerFirst()/]Query = make[ref.name.toUpperFirst()/]Query(contextDB);
		}
		[ref.name.toLowerFirst()/]Query.setArgumentHolderValue(0, this);
		return contextDB.[ref.type.name.toLowerFirst()/]Dao.query([ref.name.toLowerFirst()/]Query);
	}
	private PreparedQuery<[ref.type.name.toUpperFirst()/]> [ref.name.toLowerFirst()/]Query = null;
	/**
	 * Build a query for [ref.type.name.toUpperFirst()/] objects that match a [aDataClass.name/]
	 */
	private PreparedQuery<[ref.type.name.toUpperFirst()/]> make[ref.name.toUpperFirst()/]Query([aDataClass.eContainer().eContainer().oclAsType(AndroidProject).dataModel.name.toUpperFirst()/]Helper contextDB) throws SQLException {
		// build our inner query for UserPost objects
		QueryBuilder<[ref.opposite.name.toUpperFirst()/], Integer> [ref.opposite.name.toLowerFirst()/]Qb = contextDB.[ref.opposite.name.toLowerFirst()/]Dao.queryBuilder();
		// just select the post-id field
		[ref.opposite.name.toLowerFirst()/]Qb.selectColumns([ref.opposite.name.toUpperFirst()/].[ref.type.name.toUpper()/]_ID_FIELD_NAME);
		SelectArg userSelectArg = new SelectArg();
		// you could also just pass in user1 here
		[ref.opposite.name.toLowerFirst()/]Qb.where().eq([ref.opposite.name.toUpperFirst()/].[aDataClass.name.toUpper()/]_ID_FIELD_NAME, userSelectArg);

		// build our outer query for Post objects
		QueryBuilder<[ref.type.name.toUpperFirst()/], Integer> [ref.type.name.toLowerFirst()/]Qb = contextDB.[ref.type.name.toLowerFirst()/]Dao.queryBuilder();
		// where the id matches in the [ref.type.name.toLowerFirst()/]-id from the inner query
		[ref.type.name.toLowerFirst()/]Qb.where().in("_id", [ref.opposite.name.toLowerFirst()/]Qb);
		return [ref.type.name.toLowerFirst()/]Qb.prepare();
	}


				
					[else]
	// NOT Implemented non SQLite many2many collection reference [ref.name.toLowerFirst()/];
					[/if]
				[else] [comment the opposite has multiplicity = 1/]
					[if (ref.storage = storageKind::SQLite)]
	@ForeignCollectionField(eager = false, foreignFieldName = "[ref.opposite.references->select(otherRef : DataReference | otherRef <> ref)->first().name/]")
	protected ForeignCollection<[ref.type.name/]> [ref.name.toLowerFirst()/];
					[else]
	// NOT Implemented non SQLite collection reference [ref.name.toLowerFirst()/];
					[/if]
				[/if]
			[/if]
		[/if]
	[/for]

	// [protected (aDataClass.name.concat(' additional user properties'))]
	// [/protected]
	
	public [aDataClass.name.toUpperFirst()/]() {} // needed by ormlite
	public [aDataClass.name.toUpperFirst()/]([aDataClass.allEAttributesParam()/]) {
		super();
	[for (att : DataAttribute | aDataClass.dataAttributes)]
		[if (att.upperBound = 1)]
		this.[att.name.toLowerFirst()/] = [att.name.toLowerFirst()/];
		[/if]
	[/for]
	} 

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	[for (att : DataAttribute | aDataClass.dataAttributes)]
		[if (att.upperBound = 1)]
	public [att.type.instanceClassName/] get[att.name.toUpperFirst()/]() {
			[if (att.derived)]
		// [protected ('placeholder for derived attribute '.concat(att.name))]
		// [/protected]
			[/if]
		return this.[att.name.toLowerFirst()/];
	}
	public void set[att.name.toUpperFirst()/]([att.type.instanceClassName/] [att.name.toLowerFirst()/]) {
		this.[att.name.toLowerFirst()/] = [att.name.toLowerFirst()/];
	}
		[/if]
	[/for]

	public String toXML(){
		StringBuilder sb = new StringBuilder();
		sb.append("<");
    	sb.append(XML_[aDataClass.name.toUpper()/]);
		sb.append(" ");
    	sb.append(XML_ATT_ID);
    	sb.append("=\"");
		sb.append(this._id);
    	sb.append("\" ");
	[for (att : DataAttribute | aDataClass.dataAttributes)]
		[if (att.upperBound = 1)]
		sb.append(" ");
    	sb.append(XML_ATT_[att.name.toUpper()/]);
    	sb.append("=\"");
		sb.append(this.[att.name.toLowerFirst()/]);
    	sb.append("\" ");
		[/if]
	[/for]
    	sb.append(">");

		// TODO deal with other case

		sb.append("</");
    	sb.append(XML_[aDataClass.name.toUpper()/]);
    	sb.append(">");
		return sb.toString();
	}
}
[/file]
[/template]




